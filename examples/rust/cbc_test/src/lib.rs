// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Tests that AES-256-CBC is working properly.

#![no_std]
wasefire::applet!();

fn main() {
    if !crypto::cbc::is_supported() {
        debug!("AES-256-CBC not supported.");
        scheduling::exit();
    }
    test_encrypt();
    test_decrypt();
    scheduling::exit();
}

fn test_encrypt() {
    debug!("test_encrypt(): Encrypts the test vectors.");
    for &Vector { count, key, iv, plaintext, ciphertext } in TEST_VECTORS {
        debug!("- {count}");
        let mut blocks = plaintext.to_vec();
        crypto::cbc::encrypt(key, iv, &mut blocks).unwrap();
        assert_eq!(blocks, ciphertext);
    }
}

fn test_decrypt() {
    debug!("test_decrypt(): Decrypts the test vectors.");
    for &Vector { count, key, iv, plaintext, ciphertext } in TEST_VECTORS {
        debug!("- {count}");
        let mut blocks = ciphertext.to_vec();
        crypto::cbc::decrypt(key, iv, &mut blocks).unwrap();
        assert_eq!(blocks, plaintext);
    }
}

struct Vector {
    count: usize,
    key: &'static [u8; 32],
    iv: &'static [u8; 16],
    plaintext: &'static [u8],
    ciphertext: &'static [u8],
}

// Those test vectors are taken from:
// https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/aes/aesmmt.zip
const TEST_VECTORS: &[Vector] = &[
    Vector {
        count: 0,
        key: &[
            0x6e, 0xd7, 0x6d, 0x2d, 0x97, 0xc6, 0x9f, 0xd1, 0x33, 0x95, 0x89, 0x52, 0x39, 0x31,
            0xf2, 0xa6, 0xcf, 0xf5, 0x54, 0xb1, 0x5f, 0x73, 0x8f, 0x21, 0xec, 0x72, 0xdd, 0x97,
            0xa7, 0x33, 0x09, 0x07,
        ],
        iv: &[
            0x85, 0x1e, 0x87, 0x64, 0x77, 0x6e, 0x67, 0x96, 0xaa, 0xb7, 0x22, 0xdb, 0xb6, 0x44,
            0xac, 0xe8,
        ],
        plaintext: &[
            0x62, 0x82, 0xb8, 0xc0, 0x5c, 0x5c, 0x15, 0x30, 0xb9, 0x7d, 0x48, 0x16, 0xca, 0x43,
            0x47, 0x62,
        ],
        ciphertext: &[
            0x6a, 0xcc, 0x04, 0x14, 0x2e, 0x10, 0x0a, 0x65, 0xf5, 0x1b, 0x97, 0xad, 0xf5, 0x17,
            0x2c, 0x41,
        ],
    },
    Vector {
        count: 1,
        key: &[
            0xdc, 0xe2, 0x6c, 0x6b, 0x4c, 0xfb, 0x28, 0x65, 0x10, 0xda, 0x4e, 0xec, 0xd2, 0xcf,
            0xfe, 0x6c, 0xdf, 0x43, 0x0f, 0x33, 0xdb, 0x9b, 0x5f, 0x77, 0xb4, 0x60, 0x67, 0x9b,
            0xd4, 0x9d, 0x13, 0xae,
        ],
        iv: &[
            0xfd, 0xea, 0xa1, 0x34, 0xc8, 0xd7, 0x37, 0x9d, 0x45, 0x71, 0x75, 0xfd, 0x1a, 0x57,
            0xd3, 0xfc,
        ],
        plaintext: &[
            0x50, 0xe9, 0xee, 0xe1, 0xac, 0x52, 0x80, 0x09, 0xe8, 0xcb, 0xcd, 0x35, 0x69, 0x75,
            0x88, 0x1f, 0x95, 0x72, 0x54, 0xb1, 0x3f, 0x91, 0xd7, 0xc6, 0x66, 0x2d, 0x10, 0x31,
            0x20, 0x52, 0xeb, 0x00,
        ],
        ciphertext: &[
            0x2f, 0xa0, 0xdf, 0x72, 0x2a, 0x9f, 0xd3, 0xb6, 0x4c, 0xb1, 0x8f, 0xb2, 0xb3, 0xdb,
            0x55, 0xff, 0x22, 0x67, 0x42, 0x27, 0x57, 0x28, 0x94, 0x13, 0xf8, 0xf6, 0x57, 0x50,
            0x74, 0x12, 0xa6, 0x4c,
        ],
    },
    Vector {
        count: 2,
        key: &[
            0xfe, 0x89, 0x01, 0xfe, 0xcd, 0x3c, 0xcd, 0x2e, 0xc5, 0xfd, 0xc7, 0xc7, 0xa0, 0xb5,
            0x05, 0x19, 0xc2, 0x45, 0xb4, 0x2d, 0x61, 0x1a, 0x5e, 0xf9, 0xe9, 0x02, 0x68, 0xd5,
            0x9f, 0x3e, 0xdf, 0x33,
        ],
        iv: &[
            0xbd, 0x41, 0x6c, 0xb3, 0xb9, 0x89, 0x22, 0x28, 0xd8, 0xf1, 0xdf, 0x57, 0x56, 0x92,
            0xe4, 0xd0,
        ],
        plaintext: &[
            0x8d, 0x3a, 0xa1, 0x96, 0xec, 0x3d, 0x7c, 0x9b, 0x5b, 0xb1, 0x22, 0xe7, 0xfe, 0x77,
            0xfb, 0x12, 0x95, 0xa6, 0xda, 0x75, 0xab, 0xe5, 0xd3, 0xa5, 0x10, 0x19, 0x4d, 0x3a,
            0x8a, 0x41, 0x57, 0xd5, 0xc8, 0x9d, 0x40, 0x61, 0x97, 0x16, 0x61, 0x98, 0x59, 0xda,
            0x3e, 0xc9, 0xb2, 0x47, 0xce, 0xd9,
        ],
        ciphertext: &[
            0x60, 0x8e, 0x82, 0xc7, 0xab, 0x04, 0x00, 0x7a, 0xdb, 0x22, 0xe3, 0x89, 0xa4, 0x47,
            0x97, 0xfe, 0xd7, 0xde, 0x09, 0x0c, 0x8c, 0x03, 0xca, 0x8a, 0x2c, 0x5a, 0xcd, 0x9e,
            0x84, 0xdf, 0x37, 0xfb, 0xc5, 0x8c, 0xe8, 0xed, 0xb2, 0x93, 0xe9, 0x8f, 0x02, 0xb6,
            0x40, 0xd6, 0xd1, 0xd7, 0x24, 0x64,
        ],
    },
    Vector {
        count: 3,
        key: &[
            0x04, 0x93, 0xff, 0x63, 0x71, 0x08, 0xaf, 0x6a, 0x5b, 0x8e, 0x90, 0xac, 0x1f, 0xdf,
            0x03, 0x5a, 0x3d, 0x4b, 0xaf, 0xd1, 0xaf, 0xb5, 0x73, 0xbe, 0x7a, 0xde, 0x9e, 0x86,
            0x82, 0xe6, 0x63, 0xe5,
        ],
        iv: &[
            0xc0, 0xcd, 0x2b, 0xeb, 0xcc, 0xbb, 0x6c, 0x49, 0x92, 0x0b, 0xd5, 0x48, 0x2a, 0xc7,
            0x56, 0xe8,
        ],
        plaintext: &[
            0x8b, 0x37, 0xf9, 0x14, 0x8d, 0xf4, 0xbb, 0x25, 0x95, 0x6b, 0xe6, 0x31, 0x0c, 0x73,
            0xc8, 0xdc, 0x58, 0xea, 0x97, 0x14, 0xff, 0x49, 0xb6, 0x43, 0x10, 0x7b, 0x34, 0xc9,
            0xbf, 0xf0, 0x96, 0xa9, 0x4f, 0xed, 0xd6, 0x82, 0x35, 0x26, 0xab, 0xc2, 0x7a, 0x8e,
            0x0b, 0x16, 0x61, 0x6e, 0xee, 0x25, 0x4a, 0xb4, 0x56, 0x7d, 0xd6, 0x8e, 0x8c, 0xcd,
            0x4c, 0x38, 0xac, 0x56, 0x3b, 0x13, 0x63, 0x9c,
        ],
        ciphertext: &[
            0x05, 0xd5, 0xc7, 0x77, 0x29, 0x42, 0x1b, 0x08, 0xb7, 0x37, 0xe4, 0x11, 0x19, 0xfa,
            0x44, 0x38, 0xd1, 0xf5, 0x70, 0xcc, 0x77, 0x2a, 0x4d, 0x6c, 0x3d, 0xf7, 0xff, 0xed,
            0xa0, 0x38, 0x4e, 0xf8, 0x42, 0x88, 0xce, 0x37, 0xfc, 0x4c, 0x4c, 0x7d, 0x11, 0x25,
            0xa4, 0x99, 0xb0, 0x51, 0x36, 0x4c, 0x38, 0x9f, 0xd6, 0x39, 0xbd, 0xda, 0x64, 0x7d,
            0xaa, 0x3b, 0xda, 0xda, 0xb2, 0xeb, 0x55, 0x94,
        ],
    },
];
