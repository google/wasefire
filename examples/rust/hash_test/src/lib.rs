// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Tests that cryptographic hashes are working properly.

#![no_std]
wasefire::applet!();

use alloc::vec;

use wasefire::crypto::hash::{Algorithm, Digest};

fn main() {
    test("sha256", Algorithm::Sha256, SHA256_VECTORS);
    debug::exit(true);
}

fn test(name: &str, algorithm: Algorithm, vectors: &[Vector]) {
    debug!("test_{name}(): Compute the digest of test vectors.");
    if !crypto::hash::is_supported(algorithm) {
        debug!("- not supported");
        return;
    }
    for &Vector { message, digest } in vectors {
        debug!("- {} bytes", message.len());
        let mut result = vec![0; algorithm.digest_len()];
        Digest::digest(algorithm, message, &mut result).unwrap();
        debug::assert_eq(&result[..], digest);
    }
}

struct Vector {
    message: &'static [u8],
    digest: &'static [u8],
}

// Those test vectors are taken from:
// https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/shs/shabytetestvectors.zip
const SHA256_VECTORS: &[Vector] = &[
    Vector {
        message: &[],
        digest: &[
            0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f,
            0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b,
            0x78, 0x52, 0xb8, 0x55,
        ],
    },
    Vector {
        message: &[0xd3],
        digest: &[
            0x28, 0x96, 0x9c, 0xdf, 0xa7, 0x4a, 0x12, 0xc8, 0x2f, 0x3b, 0xad, 0x96, 0x0b, 0x0b,
            0x00, 0x0a, 0xca, 0x2a, 0xc3, 0x29, 0xde, 0xea, 0x5c, 0x23, 0x28, 0xeb, 0xc6, 0xf2,
            0xba, 0x98, 0x02, 0xc1,
        ],
    },
    Vector {
        message: &[0x11, 0xaf],
        digest: &[
            0x5c, 0xa7, 0x13, 0x3f, 0xa7, 0x35, 0x32, 0x60, 0x81, 0x55, 0x8a, 0xc3, 0x12, 0xc6,
            0x20, 0xee, 0xca, 0x99, 0x70, 0xd1, 0xe7, 0x0a, 0x4b, 0x95, 0x53, 0x3d, 0x95, 0x6f,
            0x07, 0x2d, 0x1f, 0x98,
        ],
    },
    Vector {
        message: &[0x74, 0xcb, 0x93, 0x81, 0xd8, 0x9f, 0x5a, 0xa7, 0x33, 0x68],
        digest: &[
            0x73, 0xd6, 0xfa, 0xd1, 0xca, 0xaa, 0x75, 0xb4, 0x3b, 0x21, 0x73, 0x35, 0x61, 0xfd,
            0x39, 0x58, 0xbd, 0xc5, 0x55, 0x19, 0x4a, 0x03, 0x7c, 0x2a, 0xdd, 0xec, 0x19, 0xdc,
            0x2d, 0x7a, 0x52, 0xbd,
        ],
    },
    Vector {
        message: &[
            0x0a, 0x27, 0x84, 0x7c, 0xdc, 0x98, 0xbd, 0x6f, 0x62, 0x22, 0x0b, 0x04, 0x6e, 0xdd,
            0x76, 0x2b,
        ],
        digest: &[
            0x80, 0xc2, 0x5e, 0xc1, 0x60, 0x05, 0x87, 0xe7, 0xf2, 0x8b, 0x18, 0xb1, 0xb1, 0x8e,
            0x3c, 0xdc, 0x89, 0x92, 0x8e, 0x39, 0xca, 0xb3, 0xbc, 0x25, 0xe4, 0xd4, 0xa4, 0xc1,
            0x39, 0xbc, 0xed, 0xc4,
        ],
    },
    Vector {
        message: &[
            0x07, 0x77, 0xfc, 0x1e, 0x1c, 0xa4, 0x73, 0x04, 0xc2, 0xe2, 0x65, 0x69, 0x28, 0x38,
            0x10, 0x9e, 0x26, 0xaa, 0xb9, 0xe5, 0xc4, 0xae, 0x4e, 0x86, 0x00, 0xdf, 0x4b, 0x1f,
        ],
        digest: &[
            0xff, 0xb4, 0xfc, 0x03, 0xe0, 0x54, 0xf8, 0xec, 0xbc, 0x31, 0x47, 0x0f, 0xc0, 0x23,
            0xbe, 0xdc, 0xd4, 0xa4, 0x06, 0xb9, 0xdd, 0x56, 0xc7, 0x1d, 0xa1, 0xb6, 0x60, 0xdc,
            0xc4, 0x84, 0x2c, 0x65,
        ],
    },
    Vector {
        message: &[
            0x9d, 0x64, 0xde, 0x71, 0x61, 0x89, 0x58, 0x84, 0xe7, 0xfa, 0x3d, 0x6e, 0x9e, 0xb9,
            0x96, 0xe7, 0xeb, 0xe5, 0x11, 0xb0, 0x1f, 0xe1, 0x9c, 0xd4, 0xa6, 0xb3, 0x32, 0x2e,
            0x80, 0xaa, 0xf5, 0x2b, 0xf6, 0x44, 0x7e, 0xd1, 0x85, 0x4e, 0x71, 0x00, 0x1f, 0x4d,
            0x54, 0xf8, 0x93, 0x1d,
        ],
        digest: &[
            0xd0, 0x48, 0xee, 0x15, 0x24, 0x01, 0x4a, 0xdf, 0x9a, 0x56, 0xe6, 0x0a, 0x38, 0x82,
            0x77, 0xde, 0x19, 0x4c, 0x69, 0x4c, 0xc7, 0x87, 0xfc, 0x5a, 0x1b, 0x55, 0x4e, 0xa9,
            0xf0, 0x7a, 0xbf, 0xdf,
        ],
    },
];
